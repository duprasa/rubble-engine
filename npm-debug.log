0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'memwatch@0.02' ]
2 info using npm@1.1.62
3 info using node@v0.8.11
4 verbose node symlink C:\Program Files\nodejs\\node.exe
5 verbose read json C:\Users\Nick\package.json
6 verbose read json C:\Users\Nick\node_modules\express\package.json
7 verbose read json C:\Users\Nick\node_modules\mysql\package.json
8 verbose read json C:\Users\Nick\node_modules\socket.io\package.json
9 verbose read json C:\Users\Nick\node_modules\supervisor\package.json
10 verbose read json C:\Users\Nick\node_modules\swig\package.json
11 verbose read json C:\Users\Nick\package.json
12 verbose cache add [ 'memwatch@0.02', null ]
13 silly cache add name=undefined spec="memwatch@0.02" args=["memwatch@0.02",null]
14 verbose parsed url { pathname: 'memwatch@0.02',
14 verbose parsed url   path: 'memwatch@0.02',
14 verbose parsed url   href: 'memwatch@0.02' }
15 silly cache add name="memwatch" spec="0.02" args=["memwatch","0.02"]
16 verbose parsed url { pathname: '0.02', path: '0.02', href: '0.02' }
17 verbose addNamed [ 'memwatch', '0.02' ]
18 verbose addNamed [ null, '>=0.02.0- <0.3.0-' ]
19 silly lockFile dd1e8450-memwatch-0-02 memwatch@0.02
20 verbose lock memwatch@0.02 C:\Users\Nick\AppData\Roaming\npm-cache\dd1e8450-memwatch-0-02.lock
21 silly addNameRange { name: 'memwatch', range: '>=0.02.0- <0.3.0-', hasData: false }
22 verbose url raw memwatch
23 verbose url resolving [ 'https://registry.npmjs.org/', './memwatch' ]
24 verbose url resolved https://registry.npmjs.org/memwatch
25 info trying registry request attempt 1 at 16:39:31
26 verbose etag "33BNJ43583FNG7L9LG69LTGEH"
27 http GET https://registry.npmjs.org/memwatch
28 http 304 https://registry.npmjs.org/memwatch
29 silly registry.get cb [ 304,
29 silly registry.get   { server: 'CouchDB/1.3.0 (Erlang OTP/R15B03)',
29 silly registry.get     etag: '"33BNJ43583FNG7L9LG69LTGEH"',
29 silly registry.get     date: 'Sat, 01 Jun 2013 20:39:38 GMT',
29 silly registry.get     'content-length': '0' } ]
30 verbose etag memwatch from cache
31 silly addNameRange number 2 { name: 'memwatch', range: '>=0.02.0- <0.3.0-', hasData: true }
32 silly addNameRange versions [ 'memwatch',
32 silly addNameRange   [ '0.1.0',
32 silly addNameRange     '0.1.1',
32 silly addNameRange     '0.1.2',
32 silly addNameRange     '0.1.3',
32 silly addNameRange     '0.1.4',
32 silly addNameRange     '0.1.5',
32 silly addNameRange     '0.2.0',
32 silly addNameRange     '0.2.1',
32 silly addNameRange     '0.2.2' ] ]
33 verbose addNamed [ 'memwatch', '0.2.2' ]
34 verbose addNamed [ '0.2.2', '0.2.2' ]
35 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
36 verbose lock memwatch@0.2.2 C:\Users\Nick\AppData\Roaming\npm-cache\de70a2ed-memwatch-0-2-2.lock
37 verbose read json C:\Users\Nick\AppData\Roaming\npm-cache\memwatch\0.2.2\package\package.json
38 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
39 silly lockFile dd1e8450-memwatch-0-02 memwatch@0.02
40 silly resolved [ { name: 'memwatch',
40 silly resolved     description: 'Keep an eye on your memory usage, and discover and isolate leaks.',
40 silly resolved     version: '0.2.2',
40 silly resolved     author: { name: 'Lloyd Hilaiel', url: 'http://lloyd.io' },
40 silly resolved     engines: { node: '>= 0.6.0' },
40 silly resolved     repository:
40 silly resolved      { type: 'git',
40 silly resolved        url: 'https://github.com/lloyd/node-memwatch.git' },
40 silly resolved     main: 'include.js',
40 silly resolved     licenses: [ [Object] ],
40 silly resolved     bugs: { url: 'https://github.com/lloyd/node-memwatch/issues' },
40 silly resolved     scripts: { install: 'node-gyp rebuild', test: 'mocha tests' },
40 silly resolved     devDependencies: { mocha: '1.2.2', should: '0.6.3', 'node-gyp': '0.5.7' },
40 silly resolved     contributors: [ [Object], [Object], [Object] ],
40 silly resolved     readme: '`node-memwatch`: Leak Detection and Heap Diffing for Node.JS\n============================================================\n\n[![Build Status](https://secure.travis-ci.org/lloyd/node-memwatch.png)](http://travis-ci.org/lloyd/node-memwatch)\n\n`node-memwatch` is here to help you detect and find memory leaks in\nNode.JS code.  It provides:\n\n- A `leak` event, emitted when it appears your code is leaking memory.\n\n- A `stats` event, emitted occasionally, giving you\n  data describing your heap usage and trends over time.\n\n- A `HeapDiff` class that lets you compare the state of your heap between\n  two points in time, telling you what has been allocated, and what\n  has been released.\n\n\nInstallation\n------------\n\n- `npm install memwatch`\n\nor\n\n- `git clone git://github.com/lloyd/node-memwatch.git`\n\n\nDescription\n-----------\n\nThere are a growing number of tools for debugging and profiling memory\nusage in Node.JS applications, but there is still a need for a\nplatform-independent native module that requires no special\ninstrumentation.  This module attempts to satisfy that need.\n\nTo get started, import `node-memwatch` like so:\n\n```javascript\nvar memwatch = require(\'memwatch\');\n```\n\n### Leak Detection\n\nYou can then subscribe to `leak` events.  A `leak` event will be\nemitted when your heap usage has increased for five consecutive\ngarbage collections:\n\n```javascript\nmemwatch.on(\'leak\', function(info) { ... });\n```\n\nThe `info` object will look something like:\n\n```javascript\n{ start: Fri, 29 Jun 2012 14:12:13 GMT,\n  end: Fri, 29 Jun 2012 14:12:33 GMT,\n  growth: 67984,\n  reason: \'heap growth over 5 consecutive GCs (20s) - 11.67 mb/hr\' }\n```\n\n\n### Heap Usage\n\nThe best way to evaluate your memory footprint is to look at heap\nusage right aver V8 performs garbage collection.  `memwatch` does\nexactly this - it checks heap usage only after GC to give you a stable\nbaseline of your actual memory usage.\n\nWhen V8 performs a garbage collection (technically, we\'re talking\nabout a full GC with heap compaction), `memwatch` will emit a `stats`\nevent.\n\n```javascript\nmemwatch.on(\'stats\', function(stats) { ... });\n```\n\nThe `stats` data will look something like this:\n\n```javascript\n{\n  "num_full_gc": 17,\n  "num_inc_gc": 8,\n  "heap_compactions": 8,\n  "estimated_base": 2592568,\n  "current_base": 2592568,\n  "min": 2499912,\n  "max": 2592568,\n  "usage_trend": 0\n}\n```\n\n`estimated_base` and `usage_trend` are tracked over time.  If usage\ntrend is consistently positive, it indicates that your base heap size\nis continuously growing and you might have a leak.\n\nV8 has its own idea of when it\'s best to perform a GC, and under a\nheavy load, it may defer this action for some time.  To aid in\nspeedier debugging, `memwatch` provides a `gc()` method to force V8 to\ndo a full GC and heap compaction.\n\n\n### Heap Diffing\n\nSo far we have seen how `memwatch` can aid in leak detection.  For\nleak isolation, it provides a `HeapDiff` class that takes two snapshots\nand computes a diff between them.  For example:\n\n```javascript\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\n\n// do some things ...\n\n// Take the second snapshot and compute the diff\nvar diff = hd.end();\n```\n\nThe contents of `diff` will look something like:\n\n```javascript\n{\n  "before": { "nodes": 11625, "size_bytes": 1869904, "size": "1.78 mb" },\n  "after":  { "nodes": 21435, "size_bytes": 2119136, "size": "2.02 mb" },\n  "change": { "size_bytes": 249232, "size": "243.39 kb", "freed_nodes": 197,\n    "allocated_nodes": 10007,\n    "details": [\n      { "what": "String",\n        "size_bytes": -2120,  "size": "-2.07 kb",  "+": 3,    "-": 62\n      },\n      { "what": "Array",\n        "size_bytes": 66687,  "size": "65.13 kb",  "+": 4,    "-": 78\n      },\n      { "what": "LeakingClass",\n        "size_bytes": 239952, "size": "234.33 kb", "+": 9998, "-": 0\n      }\n    ]\n  }\n```\n\nThe diff shows that during the sample period, the total number of\nallocated `String` and `Array` classes decreased, but `Leaking Class`\ngrew by 9998 allocations.  Hmmm.\n\nYou can use `HeapDiff` in your `on(\'stats\')` callback; even though it\ntakes a memory snapshot, which triggers a V8 GC, it will not trigger\nthe `stats` event itself.  Because that would be silly.\n\n\nFuture Work\n-----------\n\nPlease see the Issues to share suggestions and contribute!\n\n\nLicense\n-------\n\nhttp://wtfpl.org\n',
40 silly resolved     _id: 'memwatch@0.2.2',
40 silly resolved     _from: 'memwatch@0.02' } ]
41 info install memwatch@0.2.2 into C:\Users\Nick
42 info installOne memwatch@0.2.2
43 verbose from cache C:\Users\Nick\AppData\Roaming\npm-cache\memwatch\0.2.2\package\package.json
44 info C:\Users\Nick\node_modules\memwatch unbuild
45 verbose read json C:\Users\Nick\node_modules\memwatch\package.json
46 verbose tar unpack C:\Users\Nick\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
47 silly lockFile 5f73c575-Users-Nick-node-modules-memwatch C:\Users\Nick\node_modules\memwatch
48 verbose lock C:\Users\Nick\node_modules\memwatch C:\Users\Nick\AppData\Roaming\npm-cache\5f73c575-Users-Nick-node-modules-memwatch.lock
49 silly gunzTarPerm modes [ '755', '644' ]
50 silly gunzTarPerm extractEntry package.json
51 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
52 silly gunzTarPerm extractEntry .npmignore
53 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
54 silly gunzTarPerm extractEntry README.md
55 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
56 silly gunzTarPerm extractEntry tests.js
57 silly gunzTarPerm modified mode [ 'tests.js', 438, 420 ]
58 silly gunzTarPerm extractEntry include.js
59 silly gunzTarPerm modified mode [ 'include.js', 438, 420 ]
60 silly gunzTarPerm extractEntry foo.js
61 silly gunzTarPerm modified mode [ 'foo.js', 438, 420 ]
62 silly gunzTarPerm extractEntry examples/basic_heapdiff.js
63 silly gunzTarPerm modified mode [ 'examples/basic_heapdiff.js', 438, 420 ]
64 silly gunzTarPerm extractEntry examples/do_nothing_server.js
65 silly gunzTarPerm modified mode [ 'examples/do_nothing_server.js', 438, 420 ]
66 silly gunzTarPerm extractEntry examples/slightly_leaky.js
67 silly gunzTarPerm modified mode [ 'examples/slightly_leaky.js', 438, 420 ]
68 silly gunzTarPerm extractEntry ChangeLog
69 silly gunzTarPerm modified mode [ 'ChangeLog', 438, 420 ]
70 silly gunzTarPerm extractEntry binding.gyp
71 silly gunzTarPerm modified mode [ 'binding.gyp', 438, 420 ]
72 silly gunzTarPerm extractEntry .travis.yml
73 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
74 silly gunzTarPerm extractEntry src/heapdiff.cc
75 silly gunzTarPerm modified mode [ 'src/heapdiff.cc', 438, 420 ]
76 silly gunzTarPerm extractEntry src/heapdiff.hh
77 silly gunzTarPerm modified mode [ 'src/heapdiff.hh', 438, 420 ]
78 silly gunzTarPerm extractEntry src/init.cc
79 silly gunzTarPerm modified mode [ 'src/init.cc', 438, 420 ]
80 silly gunzTarPerm extractEntry src/memwatch.cc
81 silly gunzTarPerm modified mode [ 'src/memwatch.cc', 438, 420 ]
82 silly gunzTarPerm extractEntry src/memwatch.hh
83 silly gunzTarPerm modified mode [ 'src/memwatch.hh', 438, 420 ]
84 silly gunzTarPerm extractEntry src/platformcompat.hh
85 silly gunzTarPerm modified mode [ 'src/platformcompat.hh', 438, 420 ]
86 silly gunzTarPerm extractEntry src/util.cc
87 silly gunzTarPerm modified mode [ 'src/util.cc', 438, 420 ]
88 silly gunzTarPerm extractEntry src/util.hh
89 silly gunzTarPerm modified mode [ 'src/util.hh', 438, 420 ]
90 silly gunzTarPerm extractEntry #wscript#
91 silly gunzTarPerm modified mode [ '#wscript#', 438, 420 ]
92 verbose read json C:\Users\Nick\node_modules\memwatch\package.json
93 silly lockFile 5f73c575-Users-Nick-node-modules-memwatch C:\Users\Nick\node_modules\memwatch
94 info preinstall memwatch@0.2.2
95 verbose from cache C:\Users\Nick\node_modules\memwatch\package.json
96 verbose readDependencies using package.json deps
97 verbose from cache C:\Users\Nick\node_modules\memwatch\package.json
98 verbose readDependencies using package.json deps
99 silly resolved []
100 verbose about to build C:\Users\Nick\node_modules\memwatch
101 info build C:\Users\Nick\node_modules\memwatch
102 verbose from cache C:\Users\Nick\node_modules\memwatch\package.json
103 verbose linkStuff [ false, false, false, 'C:\\Users\\Nick\\node_modules' ]
104 info linkStuff memwatch@0.2.2
105 verbose linkBins memwatch@0.2.2
106 verbose linkMans memwatch@0.2.2
107 verbose rebuildBundles memwatch@0.2.2
108 info install memwatch@0.2.2
109 verbose unsafe-perm in lifecycle true
110 silly exec cmd "/c" "node-gyp rebuild"
111 silly cmd,/c,node-gyp rebuild,C:\Users\Nick\node_modules\memwatch spawning
112 info memwatch@0.2.2 Failed to exec install script
113 info C:\Users\Nick\node_modules\memwatch unbuild
114 verbose from cache C:\Users\Nick\node_modules\memwatch\package.json
115 info preuninstall memwatch@0.2.2
116 info uninstall memwatch@0.2.2
117 verbose true,C:\Users\Nick\node_modules,C:\Users\Nick\node_modules unbuild memwatch@0.2.2
118 info postuninstall memwatch@0.2.2
119 error memwatch@0.2.2 install: `node-gyp rebuild`
119 error `cmd "/c" "node-gyp rebuild"` failed with 1
120 error Failed at the memwatch@0.2.2 install script.
120 error This is most likely a problem with the memwatch package,
120 error not with npm itself.
120 error Tell the author that this fails on your system:
120 error     node-gyp rebuild
120 error You can get their info via:
120 error     npm owner ls memwatch
120 error There is likely additional logging output above.
121 error System Windows_NT 6.1.7601
122 error command "C:\\Program Files\\nodejs\\\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "memwatch@0.02"
123 error cwd C:\Users\Nick\Google Drive\Internship Project
124 error node -v v0.8.11
125 error npm -v 1.1.62
126 error code ELIFECYCLE
127 verbose exit [ 1, true ]
